services:
  minio:
    image: docker.io/bitnami/minio:2024
    platform: linux/arm64
    container_name: minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_DEFAULT_BUCKETS=defectdojo
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio_data:/data
    networks:
      - minionetwork

  #docker compose run --rm terraform-minio init
  #docker compose run --rm terraform-minio plan
  #docker compose run --rm terraform-minio apply -auto-approve
  #docker compose run --rm terraform-minio destroy -auto-approve
  terraform-minio:
    image: hashicorp/terraform:0.14.10
    volumes:
      - ./terraform/minio:/infra
    env_file:
      - ./terraform/terraform.env
    working_dir: /infra
    restart: unless-stopped
    networks:
      - minionetwork
  
  vault:
    image: hashicorp/vault:latest
    restart: always
    volumes:
      - vault_data:/vault/data
      - vault_log:/etc/vault/logs
      - ./vault:/vault
    ports:
      - 8200:8200
    env_file:
      - ./vault/vault.env
    cap_add:
      - IPC_LOCK
    container_name: vault
    entrypoint: "vault server -dev"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8200 || exit 1
      interval: 10s
      retries: 12
      start_period: 10s
      timeout: 10s
    networks:
      - minionetwork
  
  kaniko:
    image: localhost:8090/kaniko:latest
    container_name: kaniko
    environment:
      S3FS_BUCKET: 'defectdojo'
      S3FS_ACCESS_KEY_ID: 'O8Z0hJ87F2IksIH3MOxy'
      S3FS_SECRET_ACCESS_KEY: 'xQJA5iHHchPk0KGnaWHWGn9bvYL6dKebiDdTRXfU'
      S3FS_MOUNT: '/opt/s3fs/bucket'
      S3FS_BUCKET_URL: 'http://minio:9000'
      S3FS_ARGS: 'use_path_request_style'
    cap_add:
      - SYS_ADMIN
    security_opt:
      - 'apparmor:unconfined'
    devices:
      - /dev/fuse
    networks:
      - minionetwork

networks:
  minionetwork:
    driver: bridge

volumes:
  minio_data:
  vault_data:
  vault_log: