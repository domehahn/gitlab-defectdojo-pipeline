image: alpine

stages:
  - create_user
  - create_product_types
  - create_product_types_member
  - create_product
  - create_engagement
  - push_to_minio

variables:
  DEFECTDOJO_ENGAGEMENT_PERIOD: "7"
  DEFECTDOJO_ENGAGEMENT_STATUS: "Not Started"
  DEFECTDOJO_ENGAGEMENT_BUILD_SERVER: "null"
  DEFECTDOJO_ENGAGEMENT_SOURCE_CODE_MANAGEMENT_SERVER: "null"
  DEFECTDOJO_ENGAGEMENT_ORCHESTRATION_ENGINE: "null"
  DEFECTDOJO_ENGAGEMENT_DEDUPLICATION_ON_ENGAGEMENT: "false"
  DEFECTDOJO_ENGAGEMENT_THREAT_MODEL: "true"
  DEFECTDOJO_ENGAGEMENT_API_TEST: "true"
  DEFECTDOJO_ENGAGEMENT_PEN_TEST: "true"
  DEFECTDOJO_ENGAGEMENT_CHECK_LIST: "true"
  DEFECTDOJO_NOT_ON_MASTER: "false"
  DEFECTDOJO_ANCHORE_DISABLE: "false"
  DEFECTDOJO_URL: "http://host.docker.internal:8080/api/v2"
  DEFECTDOJO_TOKEN: "9e5666397e91a850175488a2ad66a71163397809"
  AWS_ENDPOINT_URL: "http://host.docker.internal:9000/"
  AWS_ACCESS_KEY: "FBEF8PE2bPNgu5WBJt5r"
  AWS_SECRET_KEY: "X15XSNwbexawdJgujKaosrpqOdYPUVjD2eniUdGW"
  S3_BUCKET: "defectdojo"

defectdojo_create_user:
  stage: create_user
  allow_failure: false
  before_script:
    - apk add --no-cache curl jq
    - TODAY=$(date +%Y-%m-%d)
    - ENDDAY=$(date +%Y-%m-%d)
  script:
    - echo "Creating DefectDojo user"
    - >
      USER_ID=$(curl --request POST "$DEFECTDOJO_URL/users/" \
        --header "Authorization: Token $DEFECTDOJO_TOKEN" \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "username": "Gitlab",
          "first_name": "CI",
          "last_name": "CD",
          "email": "dominik.hahn@opitz-consulting.com",
          "is_active": true,
          "is_superuser": true,
          "password": "Sup3rS4f3P4$$w[]rd",
          "configuration_permissions": [
            285
          ]
        }' | jq -r '.id')
    - echo "DEFECTDOJO_USER_ID=$USER_ID" > artifact.env
  artifacts:
    paths:
      - artifact.env

defectdojo_create_product_types:
  stage: create_product_types
  allow_failure: false
  dependencies:
    - defectdojo_create_user
  before_script:
    - apk add --no-cache curl jq
    - TODAY=$(date +%Y-%m-%d)
    - ENDDAY=$(date +%Y-%m-%d)
  script:
    - echo "Creating DefectDojo product types"
    - source artifact.env
    - >
      PRODUCT_TYPE_ID=$(curl --request POST "$DEFECTDOJO_URL/product_types/" \
        --header "Authorization: Token $DEFECTDOJO_TOKEN" \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "name": "Business Unit Security",
          "description": "Business Unit for all security tools",
          "critical_product": true,
          "key_product": true
        }' | jq -r '.id')
    - echo "DEFECTDOJO_PRODUCT_TYPE_ID=$PRODUCT_TYPE_ID" >> artifact.env
  artifacts:
    paths:
      - artifact.env

defectdojo_create_product_types_members:
  stage: create_product_types_member
  allow_failure: false
  dependencies:
    - defectdojo_create_product_types
  before_script:
    - apk add --no-cache curl jq
    - TODAY=$(date +%Y-%m-%d)
    - ENDDAY=$(date +%Y-%m-%d)
  script:
    - echo "Creating DefectDojo product type members"
    - source artifact.env
    - |
      curl --request POST "$DEFECTDOJO_URL/product_type_members/" \
        --header "Authorization: Token $DEFECTDOJO_TOKEN" \
        --header 'Content-Type: application/json' \
        --data-raw "{
          \"product_type\": \"${DEFECTDOJO_PRODUCT_TYPE_ID}\", 
          \"user\": \"${DEFECTDOJO_USER_ID}\", 
          \"role\": 4
        }"
  artifacts:
    paths:
      - artifact.env

defectdojo_create_product:
  stage: create_product
  allow_failure: false
  dependencies:
    - defectdojo_create_product_types_members
  before_script:
    - apk add --no-cache curl jq
    - TODAY=$(date +%Y-%m-%d)
    - ENDDAY=$(date +%Y-%m-%d)
  script:
    - echo "Creating DefectDojo product"
    - source artifact.env
    - >
      PRODUCT_ID=$(curl --request POST "$DEFECTDOJO_URL/products/" \
        --header "Authorization: Token $DEFECTDOJO_TOKEN" \
        --header 'Content-Type: application/json' \
        --data-raw "{
          \"name\": \"Spring Cloud API-Gateway\",
          \"description\": \"A API-Gateway created by Spring Cloud.\",
          \"prod_numeric_grade\": 2147483647,
          \"business_criticality\": \"very high\",
          \"platform\": \"web service\",
          \"lifecycle\": \"construction\",
          \"origin\": \"third party library\",
          \"user_records\": 2147483647,
          \"revenue\": \"-458\",
          \"external_audience\": true,
          \"internet_accessible\": true,
          \"enable_product_tag_inheritance\": true,
          \"enable_simple_risk_acceptance\": true,
          \"enable_full risk_acceptance\": true,
          \"disable_sla_breach_notifications\": true,
          \"product_manager\": \"$DEFECTDOJO_USER_ID\",
          \"technical_contact\": \"$DEFECTDOJO_USER_ID\",
          \"team_manager\": \"$DEFECTDOJO_USER_ID\",
          \"prod_type\": \"$DEFECTDOJO_PRODUCT_TYPE_ID\",
          \"sla_configuration\": 1,
          \"regulations\": [
            13
          ]
        }" | jq -r '.id')
    - echo "DEFECTDOJO_PRODUCT_ID=$PRODUCT_ID" >> artifact.env
  artifacts:
    paths:
      - artifact.env

defectdojo_create_engagement:
  stage: create_engagement
  allow_failure: false
  dependencies:
    - defectdojo_create_product
  before_script:
    - apk add --no-cache curl jq
    - TODAY=$(date +%Y-%m-%d)
    - ENDDAY=$(date +%Y-%m-%d)
  script:
    - echo "Creating DefectDojo engagement"
    - source artifact.env
    - >
      ENGAGEMENT_ID=$(curl --request POST "$DEFECTDOJO_URL/engagements/" \
        --header "Authorization: Token $DEFECTDOJO_TOKEN" \
        --header 'Content-Type: application/json' \
        --data-raw "{
          \"name\": \"Initial Scan\",
          \"description\": \"Initial Scan result\",
          \"version\": \"1.0\",
          \"first_contacted\": \"$TODAY\",
          \"target_start\": \"$TODAY\",
          \"target_end\": \"$ENDDAY\",
          \"lead\": \"$DEFECTDOJO_USER_ID\",
          \"engagement_type\": \"CI/CD\",
          \"product\": \"$DEFECTDOJO_PRODUCT_ID\"
        }" | jq -r '.id')
    - echo "DEFECTDOJO_ENGAGEMENT_ID=$ENGAGEMENT_ID" >> artifact.env
  artifacts:
    paths:
      - artifact.env

push_to_minio:
  stage: push_to_minio
  allow_failure: false
  dependencies:
    - defectdojo_create_engagement
  image:
    name: minio/minio
    entrypoint: [""]
  script:
    - echo "Push artifact.env to minIO S3"
    - source artifact.env
    # Create directory for certificates and decode the certificate
    - mkdir -p ~/.mc/certs/CAs
    - echo $CERTIFICATE_BASE64 | base64 -d > ~/.mc/certs/CAs/minio.cer
    - echo "Decoded certificate and stored in ~/.mc/certs/CAs/minio.cer"
    # Set alias for MinIO
    - mc --insecure alias set myminio $AWS_ENDPOINT_URL $AWS_ACCESS_KEY $AWS_SECRET_KEY || (echo "Failed to set alias" && exit 1)
    - echo "Alias set successfully"
    # List buckets to verify connection
    - mc --insecure ls myminio || (echo "Failed to list buckets" && exit 1)
    - echo "Buckets listed successfully"
    # Remove objects in the specified bucket
    - mc rm --insecure --recursive --force myminio/$S3_BUCKET/ || (echo "Failed to remove objects in bucket" && exit 1)
    - echo "Removed objects in bucket successfully"
    # Debug source file
    - if [ -f artifact.env ]; then echo "artifact.env file exists"; else echo "artifact.env file does not exist" && exit 1; fi
    # Copy files to the specified bucket
    - mc cp --insecure --recursive artifact.env myminio/$S3_BUCKET/ || (echo "Failed to copy files to bucket" && exit 1)
    - echo "Copied files to bucket successfully"
    # Decode certificate again for AWS CA Bundle
    - echo $CERTIFICATE_BASE64 | base64 -d > /tmp/minio.cer
    - export AWS_CA_BUNDLE=/tmp/minio.cer
    - mkdir $HOME/.aws
  artifacts:
    paths:
      - artifact.env